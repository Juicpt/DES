import re

#初始置换数组
IP = [58, 50, 42, 34, 26, 18, 10, 2, 60, 52, 44, 36, 28, 20, 12, 4, 62, 54,
        46, 38, 30, 22, 14, 6, 64, 56, 48, 40, 32, 24, 16, 8, 57, 49, 41, 33,
        25, 17, 9, 1, 59, 51, 43, 35, 27, 19, 11, 3, 61, 53, 45, 37, 29, 21,
        13, 5, 63, 55, 47, 39, 31, 23, 15, 7]

#逆初始置换数组
IP_1 = [40, 8, 48, 16, 56, 24, 64, 32, 39, 7, 47, 15, 55, 23, 63, 31, 38, 6,
        46, 14, 54, 22, 62, 30, 37, 5, 45, 13, 53, 21, 61, 29, 36, 4, 44, 12,
        52, 20, 60, 28, 35, 3, 43, 11, 51, 19, 59, 27, 34, 2, 42, 10, 50, 18,
        58, 26, 33, 1, 41, 9, 49, 17, 57, 25]

#置换选择1
PC_1 = [57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51,
        43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39, 31, 23, 15, 7,
        62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20,
        12, 4]

#置换选择2
PC_2 = [14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26, 8, 16,
        7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48, 44,
        49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32]

#E盒置换表
E = [32, 1, 2, 3, 4, 5, 4, 5, 6, 7, 8, 9, 8, 9, 10, 11, 12, 13, 12, 13,
        14, 15, 16, 17, 16, 17, 18, 19, 20, 21, 20, 21, 22, 23, 24, 25, 24,
        25, 26, 27, 28, 29, 28, 29, 30, 31, 32, 1]

#P盒置换表
P = [16, 7, 20, 21, 29, 12, 28, 17, 1, 15, 23, 26, 5, 18, 31, 10, 2, 8,
        24, 14, 32, 27, 3, 9, 19, 13, 30, 6, 22, 11, 4, 25]

#S盒置换表
S_Box = [
#S1盒
    [
        [14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7],
        [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8],
        [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0],
        [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13]
    ],
#S2盒
    [
        [15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10],
        [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5],
        [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15],
        [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9]
    ],
#S3盒
    [
        [10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8],
        [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1],
        [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7],
        [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12]
    ],
#S4盒
    [
        [7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15],
        [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9],
        [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4],
        [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14]
    ],
#S5盒
    [
        [2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9],
        [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6],
        [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14],
        [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3]
    ],
#S6盒
    [
        [12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11],
        [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8],
        [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6],
        [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13]
    ],
#S7盒
    [
        [4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1],
        [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6],
        [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2],
        [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12]
    ],
#S8盒
    [
        [13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7],
        [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2],
        [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8],
        [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11]
    ]
]

#轮数
LeftMove = [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1]


#字符串转二进制
def encode(s):
    return ''.join([bin(ord(c)).replace('0b', '').zfill(8) for c in s])

#二进制转字符串
def decode(s):
    return ''.join([chr(i) for i in [int(b, 2) for b in re.findall(r'.{8}', s)]])

#初始置换
def IPReplace(s):
    tmpM = ''
    ss = encode(s)
    for sss in re.findall(r'.{64}', ss):
        ssss = list(sss)
        for i in IP:
            tmpM += ssss[i-1]
    return tmpM

#逆初始置换
def IP_1Replace(s):
    tmpC = ''
    for ss in re.findall(r'.{64}',s):
        sss = list(ss)
        for i in IP_1:
            tmpC += sss[i-1]
    ssss = decode(tmpC)
    return ssss

#循环左移
def LM(s,i):
    return s[-(len(s) - i):] + s[:i]

#密钥辅助
KEY = [dict() for i in range(16)]

#生成密钥
def key(s):
    ss = encode(s)
    C0 = ''
    D0 = ''
    t = ""
    k = 0
    for i in range(0, 28):
        C0 += ss[PC_1[i] - 1]
    for j in range(28, 56):
        D0 += ss[PC_1[j] - 1]
    while (k!=16):
        C0 = LM(C0,LeftMove[k])
        D0 = LM(D0,LeftMove[k])
        sss = C0 + D0
        for i in PC_2:
            t += sss[i-1]
        KEY[k] = t
        k += 1
        t = ''
    return KEY

#拓展置换E
def EReplace(s):
    Ebox = ''
    for i in E:
        Ebox += s[i-1]
    return Ebox

#代换盒S
def SReplace(s):
    ss = re.findall(r'.{6}', s)
    sss = ""
    for i in range(8):
        a = int(ss[i][0] + ss[i][5],2)
        b = int(ss[i][1] + ss[i][2] + ss[i][3] + ss[i][4],2)

        sss += bin(S_Box[i][a][b]).replace('0b','').zfill(4)
    return sss

#置换盒P
def PReplace(s):
    ss = ''
    for i in P:
        ss += s[i-1]
    return ss

#F函数
def F(s,i):
    return str(bin((int(EReplace(s),2))^int(KEY[i],2)).replace('0b', '').zfill(48))

#加密主函数
def encodemain(txt,k):
    c = ''
    b = ''
    s = IPReplace(txt)
    key(k)
    for ss in re.findall(r'.{64}', s):
        L0 = ss[0:32]
        R0 = ss[32:64]
        for i in range(16):
            a = L0
            L0 = R0
            R0 = str(bin(int(F(R0,i))^int(a,2)).replace('0b', '').zfill(32))
        b = L0 + R0
    c +=b
    return IP_1Replace(b)

#解密主函数

def decodemain(txt,k):
    c = ''
    b = ''
    s = IPReplace(txt)
    key(k)
    for ss in re.findall(r'.{64}', s):
        L0 = ss[0:32]
        R0 = ss[32:64]
        for i in range(16,0):
            a = L0
            L0 = R0
            R0 = str(bin(int(F(R0, i)) ^ int(a, 2)).replace('0b', '').zfill(32))
        b = L0 + R0
    c += b
    return IP_1Replace(b)